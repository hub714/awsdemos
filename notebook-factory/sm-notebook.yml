AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'SageMaker Notebook Template based on Enable self-service, secured data science using Amazon SageMaker notebooks and AWS Service Catalog AWS blog'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Notebook Configuration"
        Parameters:
          - NotebookInstanceName
          - NotebookInstanceType
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - Subnet
          - DefaultSecurityGroup

      -
        Label:
          default: "Custom Configuration"
        Parameters:
          - RoleType

Parameters:

  NotebookInstanceName:
    AllowedPattern: '[A-Za-z0-9-]{1,63}'
    ConstraintDescription: Maximum of 63 alphanumeric characters. Can include hyphens
      (-), but not spaces. Must be unique within your account in an AWS Region.
    Description: SageMaker Notebook instance name
    MaxLength: '63'
    MinLength: '1'
    Type: String
    Default: 'notebook'

  NotebookInstanceType:
    AllowedValues:
      - ml.t2.medium
      - ml.m5.xlarge
    ConstraintDescription: Must select a valid notebook instance type.
    Default: ml.t2.medium
    Description: Select Instance type for the SageMaker Notebook
    Type: String

  RoleType:
    Description: Team Prefix for authentication purposes
    Type: String
    AllowedValues:
      - dsml
      - labs
    ConstraintDescription: Must be of specific values to identify the team
    Default: dsml

  Subnet:
    Description: Choose the Subnet for launching the notebook
    Type: AWS::EC2::Subnet::Id
    MinLength: 1

  DefaultSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Provide the default SecurityGroup Id
    MinLength: 1

Resources:

  GetUsername:
    Description: Custom Resource to pull username from CFN tags generated by svc catalog
    Type: Custom::GetUserName
    DependsOn: GetUsernameLambda
    Properties:
      ServiceToken: !GetAtt GetUsernameLambda.Arn

  GetUsernameLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: huberttest-pdx
        S3Key: package.zip
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: '300'
      Tags:
        - Key: RoleType
          Value: !Ref RoleType

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: labelingJobMinimalPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudformation:DescribeStacks
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  SageMakerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "sagemaker.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      RoleName: !Sub ${RoleType}-${GetUsername.Username}-SageMakerAccessRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/IAMReadOnlyAccess"
      Tags:
        - Key: RoleType
          Value: !Ref RoleType

  SageMakerNotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      SubnetId: !Ref Subnet
      SecurityGroupIds:
        - !Ref DefaultSecurityGroup
      KmsKeyId:
        Fn::ImportValue: !Sub ${RoleType}-DefaultKMSKey
      NotebookInstanceName: !Sub ${GetUsername.Username}-${NotebookInstanceName}
      InstanceType: !Ref NotebookInstanceType
      RoleArn: !GetAtt SageMakerRole.Arn
      LifecycleConfigName: !GetAtt UpdateTFConfig.NotebookInstanceLifecycleConfigName
      Tags:
        - Key: RoleType
          Value: !Ref RoleType

  UpdateTFConfig:
    Type: AWS::SageMaker::NotebookInstanceLifecycleConfig
    Properties:
      OnCreate:
        - Content: !Base64 |
            #!/bin/bash

            set -e

            # OVERVIEW
            # This script installs a custom, persistent installation of conda on the Notebook Instance's EBS volume, and ensures
            # that these custom environments are available as kernels in Jupyter.
            #
            # The on-create script downloads and installs a custom conda installation to the EBS volume via Miniconda. Any relevant
            # packages can be installed here.
            #   1. ipykernel is installed to
            #   2. Ensure the Notebook Instance has internet connectivity to download the Miniconda installer
            #
            # For another example, see:
            # https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-add-external.html#nbi-isolated-environment

            sudo -u ec2-user -i <<'EOF'
            unset SUDO_UID
            # Install a separate conda installation via Miniconda
            WORKING_DIR=/home/ec2-user/SageMaker/custom-miniconda
            mkdir -p "$WORKING_DIR"
            wget https://repo.anaconda.com/miniconda/Miniconda3-4.6.14-Linux-x86_64.sh -O "$WORKING_DIR/miniconda.sh"
            bash "$WORKING_DIR/miniconda.sh" -b -u -p "$WORKING_DIR/miniconda"
            rm -rf "$WORKING_DIR/miniconda.sh"
            # Create a custom conda environment
            source "$WORKING_DIR/miniconda/bin/activate"
            KERNEL_NAME="custom_python"
            PYTHON="3.8"
            conda create --yes --name "$KERNEL_NAME" python="$PYTHON"
            conda activate "$KERNEL_NAME"
            pip install --quiet ipykernel
            # Customize these lines as necessary to install the required packages
            nohup conda install --yes numpy &
            # Numpy takes too long to install, so install in background
            pip install --quiet boto3 tensorflow==2.2
            EOF

      OnStart:
        - Content: !Base64 |
            !/bin/bash

            set -e

            # OVERVIEW
            # This script installs a custom, persistent installation of conda on the Notebook Instance's EBS volume, and ensures
            # that these custom environments are available as kernels in Jupyter.
            #
            # The on-start script uses the custom conda environment created in the on-create script and uses the ipykernel package
            # to add that as a kernel in Jupyter.
            #
            # For another example, see:
            # https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-add-external.html#nbi-isolated-environment

            sudo -u ec2-user -i <<'EOF'
            unset SUDO_UID
            WORKING_DIR=/home/ec2-user/SageMaker/custom-miniconda/
            source "$WORKING_DIR/miniconda/bin/activate"
            for env in $WORKING_DIR/miniconda/envs/*; do
                BASENAME=$(basename "$env")
                source activate "$BASENAME"
                python -m ipykernel install --user --name "$BASENAME" --display-name "Custom ($BASENAME)"
            done
            # Optionally, uncomment these lines to disable SageMaker-provided Conda functionality.
            # echo "c.EnvironmentKernelSpecManager.use_conda_directly = False" >> /home/ec2-user/.jupyter/jupyter_notebook_config.py
            # rm /home/ec2-user/.condarc
            EOF

            echo "Restarting the Jupyter server.."
            restart jupyter-server

Outputs:
  SageMakerNoteBookURL:
    Description: "URL for the newly created SageMaker Notebook Instance"
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/sagemaker/home?region=${AWS::Region}#/notebook-instances/openNotebook/${NotebookInstanceName}'
  SageMakerNoteBookTerminalURL:
    Description: "Terminal access URL for the newly created SageMaker Notebook Instance"
    Value: !Sub 'https://${NotebookInstanceName}.notebook.${AWS::Region}.sagemaker.aws/terminals/1'
  SageMakerNotebookInstanceARN:
    Description: "ARN for the newly created SageMaker Notebook Instance"
    Value: !Ref SageMakerNotebookInstance
