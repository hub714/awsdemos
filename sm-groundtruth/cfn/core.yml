Description: >
  Starting template for Sagemaker-Groundtruth-Demo
  Last Modified: March 31 2020

Parameters:

  # LabelingEndpoint:
  #   Description: The AWS endpoint your labelers would go to direct from Sagemaker
  #   Type: String

  AppClientName:
    Type: String
    Default: 'groundtruth-demo-app-client'

  # OktaMetadataURL:
  #   Type: String

  GroundTruthDomain:
    Type: String
    Default: sm-groundtruth-demo-new

  DefaultGroupName:
    Type: String

Resources:

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      LambdaConfig:
        PostConfirmation: !GetAtt AddToDefaultGroupLambdaFunction.Arn

  CognitoUserGroupEnglish:
    Description: Default English language User Pool Group
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: !Ref DefaultGroupName
      UserPoolId: !Ref CognitoUserPool

  CognitoAppClient:
    Description: UserPool Client to hook up with Okta
    Type: AWS::Cognito::UserPoolClient
    Properties:
      # AllowedOAuthFlows:
        # - code
        # - implicit
      # AllowedOAuthFlowsUserPoolClient: true
      # AllowedOAuthScopes:
      #   - email
      #   - openid
      #   - profile
      # CallbackURLs:
      #   - !Sub "${LabelingEndpoint}"
      #   - !Sub "${LabelingEndpoint}/oauth2/idpresponse"
      ClientName: !Ref AppClientName
      # ExplicitAuthFlows:
      #   - ALLOW_CUSTOM_AUTH
      #   - ALLOW_REFRESH_TOKEN_AUTH
      #   - ALLOW_USER_PASSWORD_AUTH
      #   - ALLOW_USER_SRP_AUTH
      GenerateSecret: true # This is needed to create a workteam
      # LogoutURLs:
      #   - !Sub ${LabelingEndpoint}/logout
      # SupportedIdentityProviders:
        # - !Ref CognitoIdentityProvider
        # - COGNITO
      UserPoolId: !Ref CognitoUserPool

  # CognitoIdentityProvider:
  #   Description: UserPool Federated Identity Provider setup
  #   Type: AWS::Cognito::UserPoolIdentityProvider
  #   Properties:
  #     AttributeMapping:
  #       email: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
  #     IdpIdentifiers:
  #       - SAML
  #     ProviderDetails:
  #       MetadataURL: !Ref OktaMetadataURL
  #     ProviderName: Okta
  #     ProviderType: SAML
  #     UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolDomain:
    Description: Domain or Custom domain for your user pool
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref GroundTruthDomain
      UserPoolId: !Ref CognitoUserPool

  SageMakerDefaultWorkTeam:
    DependsOn: CognitoUserPoolDomain
    Type: AWS::SageMaker::Workteam
    Properties:
      Description: The default workteam for all users coming in from Okta
      MemberDefinitions:
        - CognitoMemberDefinition:
            CognitoClientId: !Ref CognitoAppClient
            CognitoUserGroup: !Ref CognitoUserGroupEnglish
            CognitoUserPool: !Ref CognitoUserPool

  AddToDefaultGroupLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          DefaultUserGroup: !Ref DefaultGroupName
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import logging
          import os

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          cognitoClient = boto3.client('cognito-idp')

          def lambda_handler(event, context):

              DefaultUserGroup = os.environ['DefaultUserGroup']

              print(event)
              try:

                  response = cognitoClient.admin_add_user_to_group(
                      UserPoolId=event['userPoolId'],
                      Username=event['userName'],
                      GroupName=DefaultUserGroup
                  )
              except Exception as e:
                  logger.debug('An error occured - Event: {}'.format(e))
                  return 'An error occured - see logs'
              return event

      Handler: index.lambda_handler
      Role: !GetAtt 'AddToDefaultGroupLambdaExecutionRole.Arn'
      Runtime: python3.7
      Timeout: '300'

  AddToDefaultGroupLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - cognito-idp:AdminAddUserToGroup
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*

  LambdaAccessPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AddToDefaultGroupLambdaFunction
      Principal: cognito-idp.amazonaws.com

Outputs:
  SSODomain:
    Description: SSO Domain to put into Okta
    Value: !Sub https://${GroundTruthDomain}.auth.${AWS::Region}.amazoncognito.com/saml2/idpresponse

  AudienceURI:
    Description: Value for Audience URL when creating Okta App
    Value: !Sub urn:amazon:cognito:sp:${CognitoUserPool}

  # BookmarkURL:
  #   Description: Value for the Bookmark URL
  #   Value: !Sub https://${GroundTruthDomain}.auth.${AWS::Region}.amazoncognito.com/authorize?response_type=code&identity_provider=Okta&client_id=${CognitoAppClient}&redirect_uri=${LabelingEndpoint}

  WorkTeamArn:
    Description: Arn for the SM Workteam that was created
    Value: !Ref SageMakerDefaultWorkTeam
    Export:
      Name: !Sub ${AWS::StackName}-WorkTeamArn
